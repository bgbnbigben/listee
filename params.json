{"name":"Listee","body":"# listee\r\n===\r\n\r\nC++ list comprehensions! Well, almost.....\r\n\r\nThis project attempts to bring python's _list comprehensions_ to C++. You see,\r\nin python, you can do magic like this:\r\n\r\n    l1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\r\n    l2 = [x for x in l1 if x%2 == 0]\r\n    # l2 = [2, 4, 6, 8, 10]\r\n\r\nC++ doesn't let you do this, but with the advent of lambdas and other\r\nfunctional magic, I feel like it really should let you. As such, I'm going to\r\nattempt to bring these to C++.\r\n\r\nRestrictions include not being able to use the if and for keywords -- these are\r\npart of core C++ and attempting to use them will cause compile errors, severe\r\nheadaches, the zombie apocalypse and all sorts of other issues. Instead, for\r\nnow, I'm going to use take, with, in, and where.\r\n\r\nIn other words, the C++ equivalent would be:\r\n\r\n    auto l1 = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\r\n    auto l2 = take x with x in l1 where x % 2 == 0;\r\n\r\nIsn't this cool!\r\n\r\n## Features ##\r\nThe obvious feature is the wonderful new syntax you're able to use, simply by\r\nadding ```#include <listee>``` to your code. However, on top of this:\r\n* Asynchronous/lazy evaluation. In the above example, l2 will be evaluated\r\n  either a) in the background while your program does nothing, or waits for\r\n  input, or etc, or b) only when you need its contents. This lazy/asynchronous\r\n  behaviour is provided by the magical new standard interface of C++11, and\r\n  requires no external dependencies\r\n* No external dependencies. No boost, no library that you have to compile from\r\n  source but never compiles, nothing. The only required header files and\r\n  libraries are those in the C++11 standard.\r\n* Fun. Seriously, you've always *wanted* to use this python-esque syntax. You\r\n  know it'll reduce bugs, because you don't have to write 90 lines of code\r\n  every time you want to do it. You don't have to worry about writing templated\r\n  functions and types and all sorts of voodoo witchcraft just to make your code\r\n  compile. And now you can.\r\n\r\n### Limitations ###\r\nObviously, as far as emulating python syntax goes, this is pretty terrible.\r\nHowever, unfortunately, we simply can't; for and if are reserved keywords in\r\nC++ and there's no way I can override them without screwing up the language (or\r\nthe rest of your code, more importantly). As such, we get the slightly more\r\nverbose syntax as above.\r\n\r\n","tagline":"C++ list comprehensions. You know you want it.","google":"UA-32568864-1","note":"Don't delete this file! It's used internally to help with page regeneration."}